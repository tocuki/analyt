import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import os

# ‚úÖ –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ Environment Variables (–¥–ª—è Render)
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚õî –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render Environment Variables.")

# ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å ID, –∏–º–µ–Ω–µ–º –∏ 0 –±–∞–ª–ª–∞–º–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º)
students = {
    1: {"name": "–ê–∑–∏–º", "score": 0},
    2: {"name": "–°–∞–±–∏–Ω–∞", "score": 0},
    3: {"name": "–†–∞—Ö–∏–º–∂–æ–Ω", "score": 0},
    4: {"name": "–ö–æ—Å—Ç—è", "score": 0},
    5: {"name": "–ö–∞–º–∏–ª—è", "score": 0},
    6: {"name": "–ë–æ–≥–¥–∞–Ω", "score": 0},
    7: {"name": "–ú–∞–∫—Å–∏–º", "score": 0},
    8: {"name": "–ù–∞—Å—Ç—è", "score": 54},
    9: {"name": "–ò–ª—å—è", "score": 19},
    10: {"name": "–¢–∞–º–µ—Ä–ª–∞–Ω", "score": 39},
    11: {"name": "–ê–ª–µ–º", "score": 50},
    12: {"name": "–ê–ª–µ–∫—Å–µ–π", "score": 0},
    13: {"name": "–î–∞–Ω–∏—è", "score": 0},
    14: {"name": "–¢–µ–º–∏—Ä–ª–∞–Ω", "score": 0},
    15: {"name": "–ú–∏–ª–∞–Ω–∞", "score": 0},
    16: {"name": "–†–∞–º–∏–ª–∏—è", "score": 0},
    17: {"name": "–ê–π–±–µ–∫", "score": 0},
    18: {"name": "–ê–ª—å–º–∏—Ä–∞", "score": 0},
    19: {"name": "–ê–π—Å–∞—Ä–∞", "score": 58},
    20: {"name": "–ê–ª—ë–Ω–∞", "score": 29},
    21: {"name": "–ê–∫–±–∞—è–Ω", "score": 0},
    22: {"name": "–ê—Ä—Å–µ–Ω", "score": 57},
    23: {"name": "–ê–∏–¥–∞", "score": 0},
    24: {"name": "–ö–∞—Ä–∏–Ω–∞", "score": 0},
    25: {"name": "–≠–ª—å–≤–∏—Ä–∞", "score": 0},
    26: {"name": "–ë–∏—Ä–∂–∞–Ω", "score": 0},
    27: {"name": "–ñ—É–º–∞–Ω", "score": 45},
    28: {"name": "–ú–∞–ª–∏–∫–∞", "score": 0},
    29: {"name": "–î–∞–Ω–∏–∏–ª", "score": 0}
}

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ======================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =========================

@dp.message(Command("start"))
async def start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫.\n\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n"
                         "/top - –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –±–∞–ª–ª–æ–≤")

@dp.message(Command("list"))
async def list_students(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    result = "\n".join([f"{sid}. {s['name']} ‚Äì {s['score']} –±–∞–ª–ª–æ–≤" for sid, s in students.items()])
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{result}")

@dp.message(Command("top"))
async def top_students(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫"""
    sorted_students = sorted(students.items(), key=lambda x: x[1]["score"], reverse=True)[:10]
    result = [f"{i+1}. {s['name']} ‚Äì {s['score']} –±–∞–ª–ª–æ–≤" for i, (sid, s) in enumerate(sorted_students)]
    await message.answer("üèÜ –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ —Å—É–º–º–µ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫:\n" + "\n".join(result))

# ======================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =========================
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
