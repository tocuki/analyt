import asyncio
import sqlite3
import logging
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7308160665:AAFjQ2st_AbQKNekJGVNyVj-iG8ymTgIWVs"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 8177169682  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("students.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE
)""")

cursor.execute("""CREATE TABLE IF NOT EXISTS scores (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER,
    score INTEGER,
    date TEXT,
    FOREIGN KEY (student_id) REFERENCES students (id)
)""")
conn.commit()

# ======================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –£–ß–ï–ù–ò–ö–û–í =========================
students = [
    "–ê–∑–∏–º", "–°–∞–±–∏–Ω–∞", "–†–∞—Ö–∏–º–∂–æ–Ω", "–ö–æ—Å—Ç—è", "–ö–∞–º–∏–ª—è", "–ë–æ–≥–¥–∞–Ω", "–ë. –ú–∞–∫—Å–∏–º", "–ù–∞—Å—Ç—è",
    "–ò–ª—å—è", "–¢–∞–º–µ—Ä–ª–∞–Ω", "–ê–ª–µ–º", "–ê–ª–µ–∫—Å–µ–π", "–î–∞–Ω–∏—è", "–¢–µ–º–∏—Ä–ª–∞–Ω", "–ú–∏–ª–∞–Ω–∞", "–†–∞–º–∏–ª–∏—è",
    "–ê–π–±–µ–∫", "–ê–ª—å–º–∏—Ä–∞", "–ê–π—Å–∞—Ä–∞", "–ê–ª—ë–Ω–∞", "–ê–∫–±–∞—è–Ω", "–ê—Ä—Å–µ–Ω", "–ê–∏–¥–∞", "–ö–∞—Ä–∏–Ω–∞", 
    "–≠–ª—å–≤–∏—Ä–∞", "–ë–∏—Ä–∂–∞–Ω", "–ú–∞–∫—Å–∏–º", "–ñ—É–º–∞–Ω", "–ú–∞–ª–∏–∫–∞", "–î–∞–Ω–∏–∏–ª", "–ê–ª–µ–º"
]

for name in students:
    cursor.execute("INSERT OR IGNORE INTO students (name) VALUES (?)", (name,))
conn.commit()

# ======================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =========================

@dp.message(Command("start"))
async def start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ñ—É–º–∞–Ω–∞,—Å–æ–∑–¥–≤–µ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –æ—Ü–µ–Ω–æ–∫. \n–ö–æ–º–∞–Ω–¥—ã: \n/list - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n/top - —Ç–æ–ø —É—á–µ–Ω–∏–∫–æ–≤.")

@dp.message(Command("list"))
async def list_students(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å ID"""
    cursor.execute("SELECT id, name FROM students")
    students = cursor.fetchall()

    if students:
        result = "\n".join([f"{s[0]} - {s[1]}" for s in students])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{result}")
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")

@dp.message(Command("add"))
async def add_score(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫—É –ø–æ ID (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split()
    if len(args) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [–æ—Ü–µ–Ω–∫–∞] [ID —É—á–µ–Ω–∏–∫–∞]\n–ü—Ä–∏–º–µ—Ä: /add 10 5")

    try:
        score = int(args[1])
        student_id = int(args[2])
    except ValueError:
        return await message.answer("–û—à–∏–±–∫–∞: –û—Ü–µ–Ω–∫–∞ –∏ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    if not (1 <= score <= 10):
        return await message.answer("–û—à–∏–±–∫–∞: –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")

    cursor.execute("SELECT name FROM students WHERE id = ?", (student_id,))
    student = cursor.fetchone()

    if student:
        student_name = student[0]
        today = datetime.date.today().strftime("%Y-%m-%d")
        cursor.execute("INSERT INTO scores (student_id, score, date) VALUES (?, ?, ?)", (student_id, score, today))
        conn.commit()
        await message.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {score} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {student_name} (ID: {student_id}).")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
@dp.message(Command("top"))
async def ask_top_period(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton(text="–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="–¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard)

@dp.message(F.text.in_(["–¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é", "–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü", "–¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"]))
async def top_students(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    period_map = {
        "–¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é": "date >= date('now', '-7 days')",
        "–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü": "date >= date('now', '-1 month')",
        "–¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è": "1=1"
    }
    
    period = message.text
    date_filter = period_map.get(period, "1=1")

    query = f"SELECT student_id, AVG(score) as avg_score FROM scores WHERE {date_filter} GROUP BY student_id ORDER BY avg_score DESC LIMIT 10"
    cursor.execute(query)
    top_students = cursor.fetchall()

    if not top_students:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

    result = []
    for i, (student_id, avg_score) in enumerate(top_students, start=1):
        cursor.execute("SELECT name FROM students WHERE id = ?", (student_id,))
        student_name = cursor.fetchone()[0]
        result.append(f"{i}. {student_name} - {round(avg_score, 2)}")

    await message.answer(f"üèÜ {period}:\n" + "\n".join(result))

# ======================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =========================
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
