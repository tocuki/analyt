import asyncio
import sqlite3
import logging
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7308160665:AAFjQ2st_AbQKNekJGVNyVj-iG8ymTgIWVs"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 8177169682  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("students.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE
)""")

cursor.execute("""CREATE TABLE IF NOT EXISTS scores (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER,
    score INTEGER,
    date TEXT,
    FOREIGN KEY (student_id) REFERENCES students (id)
)""")
conn.commit()

# ======================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =========================

@dp.message(Command("start"))
async def start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫. \n–ö–æ–º–∞–Ω–¥—ã: \n/list - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n/top - —Ç–æ–ø —É—á–µ–Ω–∏–∫–æ–≤.")

@dp.message(Command("list"))
async def list_students(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Å ID"""
    cursor.execute("SELECT id, name FROM students")
    students = cursor.fetchall()

    if students:
        result = "\n".join([f"{s[0]} - {s[1]}" for s in students])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{result}")
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")

@dp.message(Command("add"))
async def add_score(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫—É –ø–æ ID (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split()
    if len(args) < 3:
        return await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [–æ—Ü–µ–Ω–∫–∞] [ID —É—á–µ–Ω–∏–∫–∞]\n–ü—Ä–∏–º–µ—Ä: /add 10 5")

    try:
        score = int(args[1])
        student_id = int(args[2])
    except ValueError:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞: –û—Ü–µ–Ω–∫–∞ –∏ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")

    if not (1 <= score <= 10):
        return await message.answer("‚ö† –û—à–∏–±–∫–∞: –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!")

    cursor.execute("SELECT name FROM students WHERE id = ?", (student_id,))
    student = cursor.fetchone()

    if student:
        student_name = student[0]
        today = datetime.date.today().strftime("%Y-%m-%d")
        cursor.execute("INSERT INTO scores (student_id, score, date) VALUES (?, ?, ?)", (student_id, score, today))
        conn.commit()
        await message.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {score} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {student_name} (ID: {student_id})!")
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@dp.message(Command("remove_score"))
async def remove_score(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫!")

    args = message.text.split()
    if len(args) < 3:
        return await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_score [ID —É—á–µ–Ω–∏–∫–∞] [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫]\n–ü—Ä–∏–º–µ—Ä: /remove_score 5 2")

    try:
        student_id = int(args[1])
        count = int(args[2])
    except ValueError:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞: ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")

    cursor.execute("SELECT COUNT(*) FROM scores WHERE student_id = ?", (student_id,))
    total_scores = cursor.fetchone()[0]

    if total_scores == 0:
        return await message.answer("‚ö† –£ —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫!")

    count = min(count, total_scores)  # –£–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
    cursor.execute("DELETE FROM scores WHERE student_id = ? ORDER BY id DESC LIMIT ?", (student_id, count))
    conn.commit()

    await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –æ—Ü–µ–Ω–æ–∫ —É —É—á–µ–Ω–∏–∫–∞ —Å ID {student_id}!")

@dp.message(Command("add_student"))
async def add_student(message: Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º ID (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤!")

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_student [ID] [–ò–º—è —É—á–µ–Ω–∏–∫–∞]\n–ü—Ä–∏–º–µ—Ä: /add_student 10 –ò–≤–∞–Ω")

    try:
        student_id = int(args[1])
        student_name = args[2].strip()
    except ValueError:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    try:
        cursor.execute("INSERT INTO students (id, name) VALUES (?, ?)", (student_id, student_name))
        conn.commit()
        await message.answer(f"‚úÖ –£—á–µ–Ω–∏–∫ **{student_name}** –¥–æ–±–∞–≤–ª–µ–Ω —Å ID **{student_id}**!")
    except sqlite3.IntegrityError:
        await message.answer("‚ö† –¢–∞–∫–æ–π ID —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ —É—á–µ–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!")

@dp.message(Command("top"))
async def ask_top_period(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–æ–ø –∑–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton(text="–¢–æ–ø –∑–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton(text="–¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard)

# ======================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =========================
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
