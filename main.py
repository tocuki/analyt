import asyncio
import sqlite3
import logging
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import os

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–±–µ—Ä–∏ –∏–∑ Render Environment Variables)
TOKEN = os.getenv("TOKEN")  

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
ADMIN_ID = 8177169682  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("students.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE
)""")

cursor.execute("""CREATE TABLE IF NOT EXISTS scores (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER,
    score INTEGER,
    date TEXT,
    FOREIGN KEY (student_id) REFERENCES students (id)
)""")
conn.commit()

# ======================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =========================

@dp.message(Command("start"))
async def start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –æ—Ü–µ–Ω–æ–∫.\n\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n"
                         "/top_week - –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                         "/top_month - –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n"
                         "/top_alltime - –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
                         "/add [–æ—Ü–µ–Ω–∫–∞] [ID] - –î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É\n"
                         "/remove_scores [ID] [–∫–æ–ª-–≤–æ] - –£–¥–∞–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
                         "/clear_scores [ID] - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏")

@dp.message(Command("list"))
async def list_students(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å –∏—Ö ID"""
    cursor.execute("SELECT id, name FROM students")
    students = cursor.fetchall()

    if students:
        result = "\n".join([f"{s[0]} - {s[1]}" for s in students])
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{result}")
    else:
        await message.answer("üìå –í –±–∞–∑–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")

@dp.message(Command("add"))
async def add_score(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫—É –ø–æ ID (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

    args = message.text.split()
    if len(args) < 3:
        return await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add [–æ—Ü–µ–Ω–∫–∞] [ID —É—á–µ–Ω–∏–∫–∞]\n–ü—Ä–∏–º–µ—Ä: /add 10 5")

    try:
        score = int(args[1])
        student_id = int(args[2])
    except ValueError:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞: –û—Ü–µ–Ω–∫–∞ –∏ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")

    if not (1 <= score <= 10):
        return await message.answer("‚ö† –û—à–∏–±–∫–∞: –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!")

    cursor.execute("SELECT name FROM students WHERE id = ?", (student_id,))
    student = cursor.fetchone()

    if student:
        student_name = student[0]
        today = datetime.date.today().strftime("%Y-%m-%d")
        cursor.execute("INSERT INTO scores (student_id, score, date) VALUES (?, ?, ?)", (student_id, score, today))
        conn.commit()
        await message.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {score} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {student_name} (ID: {student_id})!")
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# ======================== –¢–û–ü –£–ß–ï–ù–ò–ö–û–í =========================

def get_top_students(period_filter):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø–∞ —É—á–µ–Ω–∏–∫–æ–≤"""
    query = f"""
    SELECT student_id, SUM(score) as total_score 
    FROM scores 
    WHERE {period_filter} 
    GROUP BY student_id 
    HAVING COUNT(score) > 0
    ORDER BY total_score DESC 
    LIMIT 10
    """
    
    cursor.execute(query)
    top_students = cursor.fetchall()

    if not top_students:
        return "‚ö† –í —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞!"

    result = []
    for i, (student_id, total_score) in enumerate(top_students, start=1):
        cursor.execute("SELECT name FROM students WHERE id = ?", (student_id,))
        student_name = cursor.fetchone()[0]
        result.append(f"{i}. {student_name} ‚Äì {total_score} –±–∞–ª–ª–æ–≤")

    return "üèÜ –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤:\n" + "\n".join(result)

@dp.message(Command("top_week"))
async def top_week(message: Message):
    """–¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    await message.answer(get_top_students("date >= date('now', '-7 days')"))

@dp.message(Command("top_month"))
async def top_month(message: Message):
    """–¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü"""
    await message.answer(get_top_students("date >= date('now', '-1 month')"))

@dp.message(Command("top_alltime"))
async def top_alltime(message: Message):
    """–¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
    await message.answer(get_top_students("1=1"))

# ======================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =========================
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
